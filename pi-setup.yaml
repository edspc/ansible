---
- name: Setup Raspberry
  hosts: raspberry
  tasks:
  - name: Setup dtoverlay in config.txt
    ansible.builtin.lineinfile:
      path: /boot/firmware/config.txt
      line: "dtoverlay=dwc2"
    when: pi_model == "zero"
    tags: pi-zero, gadget
  - name: Setup dtoverlay in cmdline.txt
    ansible.builtin.replace:
      path: /boot/firmware/cmdline.txt
      after: rootwait
      regexp: '^\s(?!modules-load=dwc2,g_ether\s)(.+)$'
      replace: ' modules-load=dwc2,g_ether \1'
    when: pi_model == "zero"
    tags: pi-zero, gadget
  - name: Enable memory cgroup
    ansible.builtin.replace:
      path: /boot/firmware/cmdline.txt
      after: rootwait
      regexp: '^(.+(?<!cgroup_enable=memory cgroup_memory=1))$'
      replace: '\1 cgroup_enable=memory cgroup_memory=1'
    tags: general, cgroup
  - name: Install packages
    ansible.builtin.package:
      name:
      - systemd-resolved
      - libnss-resolve
      - python3-pexpect
      state: latest
    tags: general, wifi
  - name: Setup usb0 network interface
    community.general.ini_file:
      path: /etc/systemd/network/10-usb0.network
      no_extra_spaces: true
      section: "{{ item.section }}"
      option: "{{ item.option }}"
      value: "{{ item.value }}"
    loop:
    - { section: 'Match', option: 'Name', value: 'usb0' }
    - { section: 'Link', option: 'RequiredForOnline', value: 'no' }
    - { section: 'Network', option: 'LinkLocalAddressing', value: 'ipv4' }
    - { section: 'Network', option: 'MulticastDNS', value: 'yes' }
    when: pi_model == "zero"
    tags: general, pi-zero
  - name: Setup wlan0 network interface
    community.general.ini_file:
      path: /etc/systemd/network/10-wlan0.network
      no_extra_spaces: true
      section: "{{ item.section }}"
      option: "{{ item.option }}"
      value: "{{ item.value }}"
    loop:
    - { section: 'Match', option: 'Name', value: 'wlan0' }
    - { section: 'Network', option: 'DHCP', value: 'ipv4' }
    - { section: 'Network', option: 'MulticastDNS', value: 'yes' }
    tags: general
  - name: Setup eth0 / end0 network interface
    tags: general, pi-4b, eth
    vars:
      interface_name: "{% if 'end0' in ansible_interfaces %}end0{% else %}eth0{% endif %}"
    community.general.ini_file:
      path: "/etc/systemd/network/15-{{ interface_name }}.network"
      no_extra_spaces: true
      section: "{{ item.section }}"
      option: "{{ item.option }}"
      value: "{{ item.value }}"
    loop:
    - { section: 'Match', option: 'Name', value: "{{ interface_name }}" }
    - { section: 'Link', option: 'RequiredForOnline', value: 'no' }
    - { section: 'Network', option: 'DHCP', value: 'ipv4' }
    - { section: 'Network', option: 'MulticastDNS', value: 'yes' }
    when: pi_model == "4b"
  - name: Configure WiFi config
    tags: general, wifi
    block:
    - name: Generate encrypted passphrase(s)
      ansible.builtin.expect:
        command: wpa_passphrase {{ item.ssid }}
        responses:
          "# reading passphrase": "{{ item.psk }}"
      when: item.psk is defined and wpa_passphrase
      loop: "{{ wpa_networks }}"
      register: wpa_encrypted_networks
      changed_when: false
      check_mode: false
    - name: Generate wpa_supplicant-wlan0.conf file
      ansible.builtin.template:
        src: templates/wpa_supplicant.conf.j2
        dest: /etc/wpa_supplicant/wpa_supplicant-wlan0.conf
        owner: root
        group: root
        mode: 0600
    - name: Enable wpa_supplicant for wlan0
      ansible.builtin.systemd_service:
        name: wpa_supplicant@wlan0.service
        enabled: yes
    - name: Disable wpa_supplicant service
      ansible.builtin.systemd_service:
        name: wpa_supplicant.service
        enabled: no
  - name: Enable ssh.socket, systemd-networkd and systemd-resolved service
    tags: general
    ansible.builtin.systemd_service:
      name: "{{ item }}"
      enabled: yes
    loop:
        - systemd-networkd
        - systemd-resolved
        - systemd-timesyncd
        - ssh.socket
  - name: Create symbolic link for resolv.conf
    tags: general
    ansible.builtin.file:
      src: /run/systemd/resolve/resolv.conf
      dest: /etc/resolv.conf
      state: link
      force: yes
  - name: Disable NetworkManager and ssh.service service
    tags: general
    ansible.builtin.systemd_service:
      name: "{{ item }}"
      enabled: no
    loop:
      - NetworkManager
      - ssh.service
  - name: Reboot the system
    ansible.builtin.reboot:
      reboot_timeout: 300
  - name: Purge unnecessary packages
    tags: general
    ansible.builtin.apt:
      name:
        - network-manager  
        - avahi-daemon
        - raspberrypi-net-mods
        - dhcpcd5
        - fake-hwclock
        - ifupdown
        - isc-dhcp-client
        - isc-dhcp-common
        - openresolv
        - rsyslog
        - firefox
      state: absent
      purge: yes
      autoremove: yes
  - name: Hold specified packages
    tags: general
    ansible.builtin.shell:
      cmd: sudo apt-mark hold "{{ item }}"
    loop:
      - network-manager  
      - avahi-daemon
      - raspberrypi-net-mods
      - dhcpcd5
      - fake-hwclock
      - ifupdown
      - isc-dhcp-client
      - isc-dhcp-common
      - openresolv
      - rsyslog

  - name: Setup Mosh
    tags: general, mosh
    block:
      - name: Install Mosh package
        ansible.builtin.apt:
          name: mosh
          state: present
          update_cache: yes
      
      - name: Open Mosh UDP port range in firewall (if UFW is used)
        ansible.builtin.ufw:
          rule: allow
          port: 60000:61000
          proto: udp
        when: manage_firewall

  - name: Set en_US.UTF-8 locale
    tags: general, locale
    block:
      - name: Ensure en_US.UTF-8 is generated
        ansible.builtin.command:
          cmd: locale-gen en_US.UTF-8

      - name: Update environment locale
        ansible.builtin.shell: |
          update-locale LANG=en_US.UTF-8

  - name: Setup zsh
    tags: general, zsh
    block:
      - name: Ensure zsh is installed
        ansible.builtin.apt:
          name:
            - zsh
            - fonts-font-awesome
          state: present
          update_cache: yes

      - name: Set zsh as default shell for the user
        ansible.builtin.user:
          name: "{{ ansible_user }}"
          shell: /usr/bin/zsh
